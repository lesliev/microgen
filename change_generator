#!/usr/bin/env ruby

require_relative('./migration_generator')

class ChangeGenerator < MigrationGenerator
  def initialize(underscored_migration_name)
    @underscored_migration_name = underscored_migration_name
  end

  def base_migration_name
    "#{@underscored_migration_name}.rb"
  end

  def write
    exit_if_existing
    class_name = @underscored_migration_name.camelize
    text=<<END
class #{class_name} < ActiveRecord::Migration
  def change
    # add_column :users, :home_page_url, :string
    # rename_column :users, :email, :email_address
    # remove_column :users, :name

    # add_index :users, :business_id
    # rename_index :users, :index_users_on_bus_id, :index_users_on_business_id
    # remove_index :users, :index_users_on_business_id

    # add_reference :users, :business, index: true, polymorphic: true
    # remove_reference :users, :business

    # add_timestamps
    # remove_timestamps

    # rename_table :users, :people

    # habtm
    # create_join_table :products, :categories
    # create_join_table :products, :categories, table_name: :categorization
    # create_join_table :products, :categories, column_options: {null: true}

    # with indexes
    # create_join_table :products, :categories do |t|
    #   t.index :product_id
    #   t.index :category_id
    # end
  end
end
END

    File.open(migration_path, 'w') do |f|
      f.puts text
    end

    puts "Generated: #{migration_path}"
  end
end

if $0 == __FILE__
  name = ARGV[0]

  if !name
    puts
    puts "usage: #{$0} underscored_migration_name"
    puts
    exit 1
  end

  begin
    cg = ChangeGenerator.new(name)
    cg.write
  rescue => e
    puts
    puts e.message
    puts
  end
end
